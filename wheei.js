// Generated by LiveScript 1.4.0
(function(){
  var startWith, trim, _i, statementStack, statementStackPop, quicks, quickkeys, key, parseScript, parseHtml, complie, wheei;
  startWith = function(l, s){
    return l.slice(0, s.length) === s;
  };
  trim = function(s){
    if (s) {
      return ('' + s).replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    } else {
      return '';
    }
  };
  _i = 0;
  statementStack = [];
  statementStackPop = function(it){
    var type;
    type = statementStack.pop();
    if (!type) {
      throw new Error("unopend `" + it + "`");
    }
    if (type !== it) {
      throw new Error("unclosed `" + type + "`");
    }
  };
  quicks = {
    '-': function(body){
      return "__out+=__e(" + body + ");";
    },
    '@': function(body){
      return "__out+=__o(arguments.callee.load(" + body + "));";
    },
    '#': function(body){
      var re, funcName, args;
      if (body) {
        re = /^(\w+)(\s+(.*))?$/.exec(body);
        if (!re) {
          throw new Error('# error');
        }
        funcName = re[1], args = re[3];
        return "function " + funcName + "(" + args + "){\n    var __out='';";
      } else {
        return 'return __out;}';
      }
    },
    '=': function(body){
      return "__out+=__o(" + body + ");";
    },
    '?': function(body){
      if (body) {
        statementStack.push('?');
        return "if(" + body + "){";
      } else {
        statementStackPop('?');
        return '}';
      }
    },
    '??': function(body){
      if (statementStack[statementStack.length - 1] !== '?') {
        throw new Error('`??` not in `?`');
      }
      return body ? "}else if(" + body + "){" : '}else{';
    },
    '~': function(body){
      var a, arr, key, value, res;
      if (body) {
        statementStack.push('~');
        a = /^(.+)\s+((\w+)\s*,\s*)?(\w+)$/.exec(body);
        if (!a) {
          throw new Error('~ error');
        }
        arr = a[1], key = a[3], value = a[4];
        _i++;
        res = "var __ref" + _i + "=" + arr + ";if(__ref" + _i + ")for(var __i" + _i + "=0,__l" + _i + "=__ref" + _i + ".length;__i" + _i + "<__l" + _i + ";__i" + _i + "++){var " + value + "=__ref" + _i + "[__i" + _i + "];";
        if (key) {
          res += "var " + key + "=__i" + _i + ";";
        }
        return res;
      } else {
        statementStackPop('~');
        return '}';
      }
    }
  };
  quickkeys = (function(){
    var results$ = [];
    for (key in quicks) {
      results$.push(key);
    }
    return results$;
  }()).sort(function(a, b){
    return b.length - a.length;
  });
  parseScript = function(script){
    var i$, ref$, len$, type, typeFunc;
    for (i$ = 0, len$ = (ref$ = quickkeys).length; i$ < len$; ++i$) {
      type = ref$[i$];
      if (startWith(script, type)) {
        typeFunc = quicks[type];
        return typeFunc(trim(script.slice(type.length)), script);
      }
    }
    return script;
  };
  parseHtml = function(html, conf){
    html.replace(/\\|'/g, '\\$&');
    if (conf.strip) {
      html = trim(html).replace(/\s*\n\s*/g, '');
    } else {
      html = html.replace(/\n/g, '\\n');
    }
    if (html) {
      return "__out+='" + html + '\';';
    }
  };
  complie = function(text, conf){
    var _i, contextType, contextStart, funcArr, i, c, s2, funcContent, contentStr;
    _i = 0;
    contextType = 'html';
    contextStart = 0;
    funcArr = [];
    i = 0;
    while (i <= text.length) {
      c = text[i];
      s2 = text.slice(i, i + 2);
      if (s2 === conf.open) {
        if (contextType !== 'html') {
          throw new Error('script start error');
        }
        funcArr.push(parseHtml(text.slice(contextStart, i), conf));
        i = i + 2;
        contextType = 'script';
        contextStart = i;
        continue;
      } else if (s2 === conf.close) {
        if (contextType !== 'script') {
          throw new Error('script end error');
        }
        funcArr.push(parseScript(text.slice(contextStart, i), conf));
        i = i + 2;
        contextType = 'html';
        contextStart = i;
        continue;
      }
      i++;
    }
    if (contextType !== 'html') {
      throw new Error('template end error');
    }
    if (contextStart !== i) {
      funcArr.push(parseHtml(text.slice(contextStart, i), conf));
    }
    funcContent = funcArr.join('\n');
    return contentStr = "var __out='';\nvar __o=wheei.parse;\nvar __e=wheei.encode;\n" + funcContent + "\nreturn __out;";
  };
  wheei = function(text, data, conf){
    var funcStr, e, func;
    conf = import$(import$({}, wheei.conf), conf);
    try {
      funcStr = complie(text, conf);
    } catch (e$) {
      e = e$;
      e.message = '[wheei complie error] ' + e.message;
      e.message += '\n[tpl]:\n';
      e.message += text;
      throw e;
    }
    try {
      func = new Function(conf.argName, funcStr);
    } catch (e$) {
      e = e$;
      e.message = '[wheei new Function error] ' + e.message;
      e.message += '\n[tplFunc]:\n';
      e.message += funcStr;
      throw e;
    }
    if (data != null) {
      return func(data);
    } else {
      return func;
    }
  };
  wheei.conf = {
    strip: false,
    argName: 'it',
    open: '<%',
    close: '%>'
  };
  wheei.parse = function(it){
    if (it != null) {
      if ('boolean' === typeof it) {
        return it ? 'true' : '';
      } else {
        return '' + it;
      }
    } else {
      return '';
    }
  };
  wheei.encode = function(it){
    var res, i$, len$, c, i;
    if ('string' !== typeof it) {
      it = wheei.parse(it);
    }
    res = '';
    for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
      c = i$;
      i = it[i$];
      switch (i) {
      case '/':
        res += '&#47;';
        break;
      case '\'':
        res += '&#39;';
        break;
      case '"':
        res += '&#34;';
        break;
      case '<':
        res += '&lt;';
        break;
      case '>':
        res += '&gt;';
        break;
      case '&':
        res += '&amp;';
        break;
      default:
        res += i;
      }
    }
    return res;
  };
  wheei.tpls = {};
  (function(){
    return this.wheei = wheei;
  })();
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
